//
// Generated file, do not edit! Created by nedtool 5.4 from nesting/linklayer/framePreemption/PreemptedFrame.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __PREEMPTEDFRAME_M_H
#define __PREEMPTEDFRAME_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "inet/linklayer/ethernet/EtherPhyFrame_m.h"
#include <omnetpp.h>
#include <memory>
typedef inet::EthernetSignal* cFramePointer;
// }}

/**
 * Class generated from <tt>nesting/linklayer/framePreemption/PreemptedFrame.msg:31</tt> by nedtool.
 * <pre>
 * packet PreemptedFrame
 * {
 *     \@customize(true);
 *     unsigned int bytesInThisPart;
 *     unsigned int bytesSent;
 *     unsigned int bytesTotal;
 *     cFramePointer completeFrame;
 * }
 * </pre>
 *
 * PreemptedFrame_Base is only useful if it gets subclassed, and PreemptedFrame is derived from it.
 * The minimum code to be written for PreemptedFrame is the following:
 *
 * <pre>
 * class PreemptedFrame : public PreemptedFrame_Base
 * {
 *   private:
 *     void copy(const PreemptedFrame& other) { ... }

 *   public:
 *     PreemptedFrame(const char *name=nullptr, short kind=0) : PreemptedFrame_Base(name,kind) {}
 *     PreemptedFrame(const PreemptedFrame& other) : PreemptedFrame_Base(other) {copy(other);}
 *     PreemptedFrame& operator=(const PreemptedFrame& other) {if (this==&other) return *this; PreemptedFrame_Base::operator=(other); copy(other); return *this;}
 *     virtual PreemptedFrame *dup() const override {return new PreemptedFrame(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from PreemptedFrame_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(PreemptedFrame)
 * </pre>
 */
class PreemptedFrame_Base : public ::omnetpp::cPacket
{
  protected:
    unsigned int bytesInThisPart;
    unsigned int bytesSent;
    unsigned int bytesTotal;
    cFramePointer completeFrame;

  private:
    void copy(const PreemptedFrame_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PreemptedFrame_Base&);
    // make constructors protected to avoid instantiation
    PreemptedFrame_Base(const char *name=nullptr, short kind=0);
    PreemptedFrame_Base(const PreemptedFrame_Base& other);
    // make assignment operator protected to force the user override it
    PreemptedFrame_Base& operator=(const PreemptedFrame_Base& other);

  public:
    virtual ~PreemptedFrame_Base();
    virtual PreemptedFrame_Base *dup() const override {throw omnetpp::cRuntimeError("You forgot to manually add a dup() function to class PreemptedFrame");}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned int getBytesInThisPart() const;
    virtual void setBytesInThisPart(unsigned int bytesInThisPart);
    virtual unsigned int getBytesSent() const;
    virtual void setBytesSent(unsigned int bytesSent);
    virtual unsigned int getBytesTotal() const;
    virtual void setBytesTotal(unsigned int bytesTotal);
    virtual cFramePointer& getCompleteFrame();
    virtual const cFramePointer& getCompleteFrame() const {return const_cast<PreemptedFrame_Base*>(this)->getCompleteFrame();}
    virtual void setCompleteFrame(const cFramePointer& completeFrame);
};


#endif // ifndef __PREEMPTEDFRAME_M_H

